@import 'app/variables/sizes';

.grid,
[class*="grid-"] {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: -$grid-gap !important; // scss-lint:disable ImportantRule
  margin-left: -$grid-pad;
  margin-right: -$grid-pad;
}

.grid > *,
[class*="grid-"] > * {
  flex: 0 1 auto;
  margin-bottom: $grid-gap !important; // scss-lint:disable ImportantRule
  padding-left: $grid-pad;
  padding-right: $grid-pad;
  width: 100%;
}

@each $_type, $_gap in $gaps-by-type {
  .grid.gap-#{$_type},
  .grid.gap-vert-#{$_type},
  .grid.gap-bottom-#{$_type},
  [class*="grid-"].gap-#{$_type},
  [class*="grid-"].gap-vert-#{$_type},
  [class*="grid-"].gap-bottom-#{$_type} {
    margin-bottom: $_gap - $grid-pad !important; // scss-lint:disable ImportantRule
  }
}

.grid-reverse {
  flex-direction: row-reverse;
}

.grid-row-equal-heights > * {
  display: flex;
  flex-wrap: wrap;

  > * {
    flex: 0 1 auto;
    width: 100%;
  }
}

.no-shrink {
  flex-shrink: 0 !important; // scss-lint:disable ImportantRule
}

@mixin make-grid-at($_size: null) {

  $_suffix: if($_size != null, -at-#{$_size}, null);

  .grid-auto#{$_suffix} > *,
  .grid-flex#{$_suffix} > * {
    width: auto;
  }

  .grid-flex#{$_suffix} {
    display: flex;
    flex-wrap: nowrap;

    > * {
      flex: 0 1 auto;
    }
  }

  @for $_num from 1 through 5 {
    .grid-#{$_num}#{$_suffix} > * {
      width: 100% / $_num;
    }
  }

  @each $_type, $_pad in $pads-by-type {
    .grid-space-#{$_type}#{$_suffix},
    .grid-col-space-#{$_type}#{$_suffix} {
      margin-left: -$_pad;
      margin-right: -$_pad;
    }

    .grid-space-#{$_type}#{$_suffix} > *,
    .grid-col-space-#{$_type}#{$_suffix} > * {
      padding-left: $_pad;
      padding-right: $_pad;
    }

    .grid-space-#{$_type}#{$_suffix},
    .grid-row-space-#{$_type}#{$_suffix} {
      margin-bottom: $_pad * -2 !important; // scss-lint:disable ImportantRule
    }

    .grid-space-#{$_type}#{$_suffix} > *,
    .grid-row-space-#{$_type}#{$_suffix} > * {
      margin-bottom: $_pad * 2 !important; // scss-lint:disable ImportantRule
    }

    $_gap: map-get($gaps-by-type, $_type);
    @each $_sub-type, $_sub-gap in $gaps-by-type {
      .grid-space-#{$_type}#{$_suffix}.gap-#{$_sub-type},
      .grid-space-#{$_type}#{$_suffix}.gap-vert-#{$_sub-type},
      .grid-space-#{$_type}#{$_suffix}.gap-bottom-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-vert-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-bottom-#{$_sub-type} {
        margin-bottom: -$_gap + $_sub-gap !important; // scss-lint:disable ImportantRule
      }
    }
  }

  $_grid-align: (
    left: flex-start,
    center: center,
    right: flex-end,
    justify: space-between,
  );

  @each $_justify, $_content in $_grid-align {
    .grid-align-#{$_justify}#{$_suffix},
    .flex-align-#{$_justify}#{$_suffix} {
      display: flex !important; // scss-lint:disable ImportantRule
      justify-content: $_content !important; // scss-lint:disable ImportantRule
    }
  }

  $_grid-valign: (
    left: flex-start,
    center: center,
    right: flex-end,
    justify: flex-start,
  );

  @each $_justify, $_items in $_grid-valign {
    .grid-valign-#{$_justify}#{$_suffix},
    .flex-valign-#{$_justify}#{$_suffix} {
      align-content: map-get($_grid-align, $_justify) !important; // scss-lint:disable ImportantRule
      align-items: $_items !important; // scss-lint:disable ImportantRule
      display: flex !important; // scss-lint:disable ImportantRule
    }
  }

}

@include make-grid-at();

@each $_size, $_width in $widths-by-size {
  @media (min-width: $_width) {
    @include make-grid-at($_size);
  }
}
