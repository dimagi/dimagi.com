@import 'app/variables/sizes';

.grid,
[class*="grid-"] {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: -$space-line !important; // scss-lint:disable ImportantRule
  margin-left: -$space-base;
  margin-right: -$space-base;
}

.grid > *,
[class*="grid-"] > * {
  flex: 0 1 auto;
  margin-bottom: $space-line !important; // scss-lint:disable ImportantRule
  padding-left: $space-base;
  padding-right: $space-base;
  width: 100%;
}

@each $_type, $_space in $space-by-type {
  $_gap: space-gap-grid($_space);

  .grid.gap-#{$_type},
  .grid.gap-vert-#{$_type},
  .grid.gap-bottom-#{$_type},
  [class*="grid-"].gap-#{$_type},
  [class*="grid-"].gap-vert-#{$_type},
  [class*="grid-"].gap-bottom-#{$_type} {
    margin-bottom: $_gap !important; // scss-lint:disable ImportantRule
  }
}

.grid-reverse {
  flex-direction: row-reverse;
}

.grid-row-equal-heights > * {
  display: flex;
  flex-wrap: wrap;

  > * {
    flex: 0 1 auto;
    width: 100%;
  }
}

.no-shrink {
  flex-shrink: 0 !important; // scss-lint:disable ImportantRule
}

@mixin _make-grid-at($_size: null) {

  $_suffix: if($_size != null, -at-#{$_size}, null);

  .grid-auto#{$_suffix} > *,
  .grid-flex#{$_suffix} > * {
    width: auto;
  }

  .grid-flex#{$_suffix} {
    display: flex;
    flex-wrap: nowrap;

    > * {
      flex: 0 1 auto;
    }
  }

  @for $_num from 1 through 5 {
    .grid-#{$_num}#{$_suffix} > * {
      width: 100% / $_num;
    }
  }

  @each $_type, $_space in $space-by-type {
    $_margin: space-margin($_space);

    .grid-space-#{$_type}#{$_suffix},
    .grid-col-space-#{$_type}#{$_suffix} {

      margin-left: -$_margin;
      margin-right: -$_margin;

      > * {
        padding-left: $_margin;
        padding-right: $_margin;
      }
    }

    .grid-space-#{$_type}#{$_suffix},
    .grid-row-space-#{$_type}#{$_suffix} {
      margin-bottom: $_space !important; // scss-lint:disable ImportantRule

      > * {
        margin-bottom: $_space !important; // scss-lint:disable ImportantRule
      }
    }

    @each $_sub-type, $_sub-space in $space-by-type {
      .grid-space-#{$_type}#{$_suffix}.gap-#{$_sub-type},
      .grid-space-#{$_type}#{$_suffix}.gap-vert-#{$_sub-type},
      .grid-space-#{$_type}#{$_suffix}.gap-bottom-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-vert-#{$_sub-type},
      .grid-row-space-#{$_type}#{$_suffix}.gap-bottom-#{$_sub-type} {
        margin-bottom: $_space - $_sub-space !important; // scss-lint:disable ImportantRule
      }
    }
  }

  $_grid-align: (
    left: flex-start,
    center: center,
    right: flex-end,
    justify: space-between,
  );

  @each $_justify, $_content in $_grid-align {
    .grid-align-#{$_justify}#{$_suffix},
    .flex-align-#{$_justify}#{$_suffix} {
      display: flex !important; // scss-lint:disable ImportantRule
      justify-content: $_content !important; // scss-lint:disable ImportantRule
    }
  }

  $_grid-valign: (
    top: flex-start,
    middle: center,
    bottom: flex-end,
    justify: space-between,
  );

  @each $_justify, $_items in $_grid-valign {
    .grid-valign-#{$_justify}#{$_suffix},
    .flex-valign-#{$_justify}#{$_suffix} {
      $_content: map-get($_grid-align, $_justify);
      @if $_content == null {
        $_content: $_items;
      }

      align-content: $_content !important; // scss-lint:disable ImportantRule
      align-items: $_items !important; // scss-lint:disable ImportantRule
      display: flex !important; // scss-lint:disable ImportantRule
    }
  }

}

@include _make-grid-at();

@each $_size, $_width in $widths-by-size {
  @media (min-width: $_width) {
    @include _make-grid-at($_size);
  }
}
